"use client";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { ContentLayout } from "@/components/admin-panel/content-layout";
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from "@/components/ui/breadcrumb";
import Link from "next/link";
import { Download } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

type FRDraftData = {
  projectName: string;
  description: string;
  priority: string;
  generatedContent: string;
  sourceDocuments: string[];
  fullContent?: string;
};

export default function FRDraftPage() {
  const [draftData, setDraftData] = useState<FRDraftData | null>(null);
  const [editedContent, setEditedContent] = useState("");
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // Retrieve the data from sessionStorage
    const storedData = sessionStorage.getItem('frDraftData');
    if (storedData) {
      const data = JSON.parse(storedData) as FRDraftData;
      setDraftData(data);
      setEditedContent(data.fullContent || data.generatedContent);
    } else {
      // Fallback data if none found
      const fallbackData = {
        projectName: "Demo Project",
        description: "Sample description",
        priority: "medium",
        generatedContent: "# Functional Requirements Document\n\n## Overview\nSample content",
        sourceDocuments: []
      };
      setDraftData(fallbackData);
      setEditedContent(fallbackData.generatedContent);
    }
  }, []);

  const handleExport = async (format: 'pdf' | 'docx') => {
    setIsExporting(true);
    try {
      const response = await fetch('/api/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: editedContent,
          format,
          metadata: {
            title: draftData?.projectName || "Functional Requirements",
            author: "Generated by FR Generator"
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to export ${format}`);
      }

      // Create download link
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${draftData?.projectName || 'requirements'}.${format}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast({
        title: "Export Successful",
        description: `Document has been exported as ${format.toUpperCase()}`,
      });
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: "Export Failed",
        description: `Failed to export document as ${format.toUpperCase()}`,
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  if (!draftData) return <div>Loading...</div>;

  return (
    <ContentLayout title="FR Draft">
      <Breadcrumb>
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink asChild>
              <Link href="/">Home</Link>
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink asChild>
              <Link href="/fr-generator">FR Generator</Link>
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>Draft</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>

      <div className="grid gap-6 mt-6">
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>FR Draft Editor</CardTitle>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  onClick={() => handleExport('docx')}
                  disabled={isExporting}
                  className="flex items-center gap-2"
                >
                  {isExporting ? (
                    "Exporting..."
                  ) : (
                    <>
                      <Download className="h-4 w-4" />
                      Export as Word
                    </>
                  )}
                </Button>
                <Button 
                  onClick={() => handleExport('pdf')}
                  disabled={isExporting}
                  className="flex items-center gap-2"
                >
                  {isExporting ? (
                    "Exporting..."
                  ) : (
                    <>
                      <Download className="h-4 w-4" />
                      Export as PDF
                    </>
                  )}
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h3 className="font-medium">Project: {draftData.projectName}</h3>
                <p className="text-sm text-muted-foreground">
                  Priority: {draftData.priority} â€¢ 
                  Description: {draftData.description}
                </p>
              </div>

              <Textarea
                value={editedContent}
                onChange={(e) => setEditedContent(e.target.value)}
                className="min-h-[400px] font-mono text-sm"
                placeholder="Edit your functional requirements document here..."
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Source Documents</CardTitle>
          </CardHeader>
          <CardContent>
            {draftData.sourceDocuments.length > 0 ? (
              <ul className="space-y-2">
                {draftData.sourceDocuments.map((doc, index) => (
                  <li key={index} className="p-2 border rounded-md flex items-center">
                    <span className="flex-1 truncate">{doc}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-muted-foreground">No source documents uploaded</p>
            )}
          </CardContent>
        </Card>
      </div>
    </ContentLayout>
  );
}