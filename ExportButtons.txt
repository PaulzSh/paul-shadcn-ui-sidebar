import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import { Download, FileText, FileUp, Save } from 'lucide-react';

interface ExportButtonsProps {
  editedContent: string;
  filename?: string;
  className?: string;
}

export function ExportButtons({ 
  editedContent, 
  filename = 'document',
  className = ''
}: ExportButtonsProps) {
  const [exporting, setExporting] = useState<'word' | 'pdf' | 'draft' | null>(null);
  const { toast } = useToast();

  const handleExport = async (format: 'word' | 'pdf') => {
    setExporting(format);
    
    try {
      const response = await fetch(`/api/export/${format}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          editedContent,
          filename: filename.replace(/\s+/g, '_') // Replace spaces with underscores
        })
      });

      if (!response.ok) {
        throw new Error(await response.text());
      }

      // Trigger download
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = response.headers.get('content-disposition')?.split('filename=')[1] 
                  || `${filename}.${format}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast({
        title: 'Export Successful',
        description: `Document has been exported as ${format.toUpperCase()}`,
        className: 'bg-green-50 text-green-800'
      });
    } catch (error) {
      toast({
        title: 'Export Failed',
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: 'destructive',
        className: 'bg-red-50 text-red-800'
      });
    } finally {
      setExporting(null);
    }
  };

  const handleSaveDraft = async () => {
    setExporting('draft');
    
    try {
      // Simulate API call to save draft
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // In a real implementation, you would call your API endpoint here
      // Example:
      /*
      const response = await fetch('/api/save-draft', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: editedContent,
          filename: filename.replace(/\s+/g, '_')
        })
      });

      if (!response.ok) {
        throw new Error(await response.text());
      }
      */

      toast({
        title: 'Draft Saved',
        description: 'Your document has been saved as a draft',
        className: 'bg-blue-50 text-blue-800'
      });
    } catch (error) {
      toast({
        title: 'Save Failed',
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: 'destructive',
        className: 'bg-red-50 text-red-800'
      });
    } finally {
      setExporting(null);
    }
  };

  return (
    <div className={`flex flex-wrap gap-3 ${className}`}>
      <Button
        onClick={() => handleSaveDraft()}
        disabled={!!exporting}
        variant={exporting === 'draft' ? 'default' : 'outline'}
        className="gap-2 px-4 py-2 min-w-[140px] transition-all bg-gray-600 hover:bg-gray-700 text-white"
      >
        {exporting === 'draft' ? (
          <>
            <Save className="h-4 w-4 animate-pulse" />
            <span>Saving...</span>
          </>
        ) : (
          <>
            <Save className="h-4 w-4" />
            <span>Save as Draft</span>
          </>
        )}
      </Button>

      <Button
        onClick={() => handleExport('word')}
        disabled={!!exporting}
        variant={exporting === 'word' ? 'default' : 'outline'}
        className="gap-2 px-4 py-2 min-w-[140px] transition-all"
      >
        {exporting === 'word' ? (
          <>
            <FileUp className="h-4 w-4 animate-pulse" />
            <span>Exporting...</span>
          </>
        ) : (
          <>
            <FileText className="h-4 w-4" />
            <span>Export Word</span>
          </>
        )}
      </Button>

      <Button
        onClick={() => handleExport('pdf')}
        disabled={!!exporting}
        variant={exporting === 'pdf' ? 'default' : 'outline'}
        className="gap-2 px-4 py-2 min-w-[140px] transition-all bg-blue-600 hover:bg-blue-700 text-white"
      >
        {exporting === 'pdf' ? (
          <>
            <FileUp className="h-4 w-4 animate-pulse" />
            <span>Exporting...</span>
          </>
        ) : (
          <>
            <Download className="h-4 w-4" />
            <span>Export PDF</span>
          </>
        )}
      </Button>
    </div>
  );
}