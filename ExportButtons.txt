import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { useToast } from '@/components/ui/use-toast'

export function ExportButtons({ content }: { content: Record<string, any> }) {
  const [exporting, setExporting] = useState<'word' | 'pdf' | null>(null)
  const { toast } = useToast()

  const handleExport = async (format: 'word' | 'pdf') => {
    setExporting(format)
    
    try {
      const endpoint = `/api/export/${format}`
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: {
            ...content,
            projectName: content.projectName || 'Untitled',
            exportDate: new Date().toISOString()
          }
        })
      })

      if (!response.ok) {
        throw new Error(await response.text())
      }

      // Trigger download
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `requirements_${content.projectName || ''}.${format}`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      window.URL.revokeObjectURL(url)

      toast({
        title: 'Export Successful',
        description: `Document exported as ${format.toUpperCase()}`
      })
    } catch (error) {
      toast({
        title: 'Export Failed',
        description: error instanceof Error ? error.message : 'Unknown error',
        variant: 'destructive'
      })
    } finally {
      setExporting(null)
    }
  }

  return (
    <div className="flex gap-3">
      <Button
        onClick={() => handleExport('word')}
        disabled={!!exporting}
        variant={exporting === 'word' ? 'default' : 'outline'}
        className="min-w-32"
      >
        {exporting === 'word' ? (
          <span className="flex items-center gap-2">
            <Spinner />
            Exporting...
          </span>
        ) : (
          'Export Word'
        )}
      </Button>

      <Button
        onClick={() => handleExport('pdf')}
        disabled={!!exporting}
        variant={exporting === 'pdf' ? 'default' : 'outline'}
        className="min-w-32"
      >
        {exporting === 'pdf' ? (
          <span className="flex items-center gap-2">
            <Spinner />
            Exporting...
          </span>
        ) : (
          'Export PDF'
        )}
      </Button>
    </div>
  )
}

function Spinner() {
  return (
    <svg
      className="h-4 w-4 animate-spin"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  )
}