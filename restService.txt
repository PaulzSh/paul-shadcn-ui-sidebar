from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import uuid
import os
from datetime import datetime
from document_processor import DocumentProcessor  # 导入同步版处理器

app = Flask(__name__)

# Configuration
UPLOAD_DIR = "uploads"
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
ALLOWED_EXTENSIONS = {'.pdf', '.docx', '.txt'}
os.makedirs(UPLOAD_DIR, exist_ok=True)

# Initialize processor
processor = DocumentProcessor()

@app.route('/upload', methods=['POST'])
def upload_file():
    """文件上传端点（同步处理）"""
    if 'file' not in request.files:
        return jsonify({"error": "No file provided"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "Empty filename"}), 400
    
    if not allowed_file(file.filename):
        return jsonify({"error": "Unsupported file type"}), 400
    
    try:
        file_id = str(uuid.uuid4())
        filename = secure_filename(file.filename)
        file_path = os.path.join(UPLOAD_DIR, file_id)
        
        file.save(file_path)
        return jsonify({
            "file_id": file_id,
            "original_name": filename,
            "size": os.path.getsize(file_path)
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/analyze', methods=['POST'])
def analyze_documents():
    """文档分析端点（同步处理）"""
    data = request.get_json()
    if not data or 'file_ids' not in data:
        return jsonify({"error": "file_ids required"}), 400
    
    try:
        # 验证文件存在
        file_paths = []
        for file_id in data['file_ids']:
            path = os.path.join(UPLOAD_DIR, file_id)
            if not os.path.exists(path):
                raise ValueError(f"File {file_id} not found")
            file_paths.append(path)
        
        # 同步处理文档
        result = processor.generate_fr_document(
            file_paths=file_paths,
            project_info={
                "name": data.get("project_name", ""),
                "description": data.get("description", "")
            }
        )
        
        return jsonify({
            "status": "completed",
            "result": {
                "project_name": result["project_name"],
                "description": result["description"],
                "requirements": result["requirements"],
                "technical_specs": result["technical_specs"],
                "content_preview": result["full_content"][:500] + "..."  # 返回部分内容
            }
        })
        
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": f"Processing failed: {str(e)}"}), 500

@app.route('/export', methods=['POST'])
def export_document():
    """文档导出端点"""
    data = request.get_json()
    if not data or 'content' not in data:
        return jsonify({"error": "content required"}), 400
    
    try:
        # 在实际应用中这里实现PDF/Word导出逻辑
        # 此处返回模拟响应
        return jsonify({
            "status": "success",
            "download_url": f"/exports/{uuid.uuid4()}.pdf",
            "message": "Export completed"
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def allowed_file(filename):
    """检查文件扩展名是否合法"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in {ext[1:] for ext in ALLOWED_EXTENSIONS}

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, threaded=True)  # 启用多线程处理请求