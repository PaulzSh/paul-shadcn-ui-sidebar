import numpy as np
from typing import List
from langchain.embeddings.base import Embeddings

class CustomEmbeddings(Embeddings):
    """Your existing implementation"""
    def __init__(self):
        self.connector = VertexAIConnector()  # Your actual connector
        self.model = self.connector.get_embedding_model()
    
    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        vectors = self.model.get_embeddings(texts)
        return self._ensure_float_vectors(vectors)
    
    def embed_query(self, text: str) -> List[float]:
        return self.embed_documents([text])[0]
    
    @staticmethod
    def _ensure_float_vectors(vectors) -> List[List[float]]:
        if isinstance(vectors, np.ndarray):
            return vectors.astype(float).tolist()
        return [[float(x) for x in vec] for vec in vectors]


class CustomEmbeddingsTest:
    """Test harness for CustomEmbeddings"""
    
    @staticmethod
    def run_tests():
        print("🚀 Starting CustomEmbeddings Tests...")
        embeddings = CustomEmbeddings()
        
        # Test 1: Verify single document embedding
        print("\n🔍 Test 1: Single Document Embedding")
        test_text = "Hello world"
        result = embeddings.embed_query(test_text)
        CustomEmbeddingsTest._validate_embedding(result, f"'{test_text}'")
        
        # Test 2: Verify multiple documents
        print("\n📚 Test 2: Multiple Documents")
        texts = ["Hello", "LangChain", "FAISS integration"]
        results = embeddings.embed_documents(texts)
        for i, (text, vec) in enumerate(zip(texts, results)):
            CustomEmbeddingsTest._validate_embedding(vec, f"document {i} ('{text}')")
        
        # Test 3: Edge cases
        print("\� Edge Cases")
        empty_result = embeddings.embed_documents([""])
        CustomEmbeddingsTest._validate_embedding(empty_result[0], "empty string")
        
        print("\n✅ All tests completed!")

    @staticmethod
    def _validate_embedding(vector: List[float], description: str):
        print(f"  Validating {description}:")
        print(f"  → Type: {type(vector)}")
        print(f"  → Length: {len(vector)}")
        print(f"  → Sample values: {vector[:3]}...")
        
        assert isinstance(vector, list), f"Expected list, got {type(vector)}"
        assert all(isinstance(x, float) for x in vector), "Non-float values detected"
        print("  ✔ Validation passed")


if __name__ == "__main__":
    # Initialize with mock connector if needed
    class VertexAIConnector:
        def get_embedding_model(self):
            return MockEmbeddingModel()

    class MockEmbeddingModel:
        def get_embeddings(self, texts):
            # Mock embedding: returns random vectors
            return np.random.rand(len(texts), 384)  # 384-dim vectors

    CustomEmbeddingsTest.run_tests()