"use client";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { ContentLayout } from "@/components/admin-panel/content-layout";
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from "@/components/ui/breadcrumb";
import Link from "next/link";
import { InputFields } from "./input-fields";
import { UploadCard } from "./upload-card";
import { Loader2 } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

export default function FRGeneratorPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [files, setFiles] = useState<File[]>([]);
  const [formData, setFormData] = useState({
    projectName: "",
    description: "",
    priority: "medium",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // 1. Upload files to the API
      const fileIds = await Promise.all(
        files.map(async (file) => {
          const formData = new FormData();
          formData.append('file', file);
          
          const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData,
          });

          if (!response.ok) {
            throw new Error(`Failed to upload ${file.name}`);
          }

          const data = await response.json();
          return data.file_id;
        })
      );

      // 2. Submit analysis request
      const analysisResponse = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          file_ids: fileIds,
          project_name: formData.projectName,
          description: formData.description,
          priority: formData.priority
        }),
      });

      if (!analysisResponse.ok) {
        throw new Error('Failed to start analysis');
      }

      const { task_id } = await analysisResponse.json();

      // 3. Poll for task completion
      let taskCompleted = false;
      let result = null;
      
      while (!taskCompleted) {
        const statusResponse = await fetch(`/api/tasks/${task_id}`);
        const taskData = await statusResponse.json();
        
        if (taskData.status === 'completed') {
          taskCompleted = true;
          result = taskData.result;
        } else if (taskData.status === 'failed') {
          throw new Error(taskData.error || 'Analysis failed');
        }
        
        // Wait 1 second before polling again
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // 4. Store results and navigate to draft page
      const frDraftData = {
        projectName: result.project_name || formData.projectName,
        description: result.description || formData.description,
        priority: formData.priority,
        generatedContent: result.draft_content || generateFallbackContent(),
        sourceDocuments: files.map(file => file.name)
      };

      sessionStorage.setItem('frDraftData', JSON.stringify(frDraftData));
      router.push("/fr-generator/draft");

    } catch (error) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const generateFallbackContent = () => {
    return `# Functional Requirements Document\n\n**Project:** ${formData.projectName || "Demo Project"}\n\n## Overview\n${formData.description || "Sample description"}\n\n## Requirements\n1. Sample requirement 1\n2. Sample requirement 2\n3. Sample requirement 3`;
  };

  return (
    <ContentLayout title="FR Generator">
      <Breadcrumb>
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink asChild>
              <Link href="/">Home</Link>
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>FR Generator</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>

      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2 mt-6">
        {/* Document Upload Section */}
        <Card>
          <CardHeader>
            <CardTitle>Upload Documents</CardTitle>
          </CardHeader>
          <CardContent>
            <UploadCard files={files} setFiles={setFiles} />
          </CardContent>
        </Card>

        {/* FR Details Section */}
        <Card>
          <CardHeader>
            <CardTitle>FR Information</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <InputFields formData={formData} setFormData={setFormData} />
              
              <div className="flex justify-end gap-4 pt-4">
                <Button variant="outline" type="button">
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={files.length === 0 || !formData.projectName || isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : 'Generate Draft'}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </ContentLayout>
  );
}