import numpy as np
from typing import List
from langchain_community.vectorstores import FAISS
from custom_embeddings import CustomEmbeddings  # Your working implementation

class FAISSTestHarness:
    def __init__(self):
        self.embeddings = CustomEmbeddings()
        self.vector_store = None

    def test_faiss_creation(self, texts: List[str]):
        """Test FAISS index creation with custom embeddings"""
        print("\n🔧 Testing FAISS Integration")
        
        # 1. Create FAISS index
        self.vector_store = FAISS.from_texts(
            texts=texts,
            embedding=self.embeddings
        )
        print("✅ FAISS index created successfully")

        # 2. Verify index stats
        print(f"→ Documents in index: {self.vector_store.index.ntotal}")
        print(f"→ Embedding dimension: {self.vector_store.index.d}")

        # 3. Test similarity search
        query = "test query"
        print(f"\n🔍 Testing similarity search for: '{query}'")
        results = self.vector_store.similarity_search(query, k=2)
        print(f"→ Top result: {results[0].page_content}")
        
        return self.vector_store

if __name__ == "__main__":
    # Initialize test harness
    tester = FAISSTestHarness()
    
    # Test data
    test_texts = [
        "LangChain is a framework for LLM applications",
        "FAISS is a vector similarity search library",
        "Embeddings convert text to numerical vectors"
    ]
    
    # Run tests
    vector_store = tester.test_faiss_creation(test_texts)
    
    # Optional: Save index for later use
    vector_store.save_local("test_faiss_index")
    print("\n💾 Saved FAISS index to 'test_faiss_index'")