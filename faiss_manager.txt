def __init__(self, embeddings: Union['Embeddings', Callable]):
    """
    参数:
        embeddings: 支持三种形式：
        1. LangChain Embeddings实例
        2. 普通嵌入函数
        3. 自定义类（只要有embed_documents方法）
    """
    # 方法1：优先检查接口协议而非继承关系
    if hasattr(embeddings, 'embed_documents') and callable(embeddings.embed_documents):
        self.embeddings = embeddings
    # 方法2：普通函数
    elif callable(embeddings):
        from embeddings.adapters import FunctionAsEmbedding
        self.embeddings = FunctionAsEmbedding(embeddings)
    else:
        raise TypeError(
            f"需实现embed_documents方法或为可调用对象，得到 {type(embeddings)}\n"
            "有效类型：\n"
            "1. LangChain Embeddings实例\n"
            "2. 包含embed_documents方法的类\n"
            "3. 普通嵌入函数(texts: List[str]) -> List[List[float]]"
        )
    
    # 强制验证
    self._validate_embeddings()

def _validate_embeddings(self):
    """执行运行时验证"""
    try:
        test_result = self.embeddings.embed_documents(["test"])
        if not (isinstance(test_result, list) and 
                isinstance(test_result[0], list) and 
                isinstance(test_result[0][0], (float, int))):
            raise ValueError("嵌入函数必须返回List[List[float]]")
    except Exception as e:
        raise RuntimeError(f"嵌入验证失败: {str(e)}")