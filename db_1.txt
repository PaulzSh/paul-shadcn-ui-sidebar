-- 创建文档主表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENTS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENTS (
    DOCUMENT_ID VARCHAR2(36) PRIMARY KEY,
    DOCUMENT_NUMBER VARCHAR2(50) NOT NULL,
    TITLE VARCHAR2(255) NOT NULL,
    DOCUMENT_TYPE VARCHAR2(20) NOT NULL,
    FILE_PATH VARCHAR2(500) NOT NULL,
    FILE_SIZE NUMBER NOT NULL,
    CATEGORY VARCHAR2(100) NOT NULL,
    STATUS VARCHAR2(20) NOT NULL,
    AUDIENCE VARCHAR2(500),
    REGIONS VARCHAR2(500),
    BRANDS VARCHAR2(500),
    ACTION_INDICATOR VARCHAR2(50),
    PUBLISHED_DATE DATE,
    METADATA CLOB,
    BATCH_ID VARCHAR2(50),
    CREATED_BY VARCHAR2(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY VARCHAR2(50),
    UPDATED_AT TIMESTAMP,
    CONSTRAINT UK_DOC_NUMBER UNIQUE (DOCUMENT_NUMBER),
    CONSTRAINT CHK_DOC_TYPE CHECK (DOCUMENT_TYPE IN ('PDF', 'DOCX', 'DOC', 'MARKDOWN', 'OTHER')),
    CONSTRAINT CHK_STATUS CHECK (STATUS IN ('DRAFT', 'UNDER_REVIEW', 'PUBLISHED', 'DEPRECATED', 'ARCHIVED'))
);

-- 创建文档分类表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENT_CATEGORIES CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENT_CATEGORIES (
    CATEGORY_ID VARCHAR2(36) PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(100) NOT NULL,
    PARENT_CATEGORY_ID VARCHAR2(36),
    DESCRIPTION VARCHAR2(500),
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT FK_PARENT_CATEGORY FOREIGN KEY (PARENT_CATEGORY_ID) REFERENCES DOCUMENT_CATEGORIES(CATEGORY_ID),
    CONSTRAINT UK_CATEGORY_NAME UNIQUE (CATEGORY_NAME)
);

-- 创建文档版本表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENT_VERSIONS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENT_VERSIONS (
    VERSION_ID VARCHAR2(36) PRIMARY KEY,
    DOCUMENT_ID VARCHAR2(36) NOT NULL,
    VERSION_NUMBER NUMBER NOT NULL,
    EFFECTIVE_DATE DATE,
    CHANGE_DESCRIPTION VARCHAR2(1000),
    FILE_HASH VARCHAR2(64) NOT NULL,
    CREATED_BY VARCHAR2(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT FK_DOC_VERSION FOREIGN KEY (DOCUMENT_ID) REFERENCES DOCUMENTS(DOCUMENT_ID),
    CONSTRAINT UK_DOC_VERSION UNIQUE (DOCUMENT_ID, VERSION_NUMBER)
);

-- 创建文档生效日期表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENT_EFFECTIVE_DATES CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENT_EFFECTIVE_DATES (
    DATE_ID VARCHAR2(36) PRIMARY KEY,
    DOCUMENT_ID VARCHAR2(36) NOT NULL,
    VERSION_ID VARCHAR2(36) NOT NULL,
    EFFECTIVE_DATE DATE NOT NULL,
    IMPLEMENTATION_DETAILS VARCHAR2(1000),
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT FK_EFFECTIVE_DOC FOREIGN KEY (DOCUMENT_ID) REFERENCES DOCUMENTS(DOCUMENT_ID),
    CONSTRAINT FK_EFFECTIVE_VER FOREIGN KEY (VERSION_ID) REFERENCES DOCUMENT_VERSIONS(VERSION_ID)
);

-- 创建文档内容块表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENT_CHUNKS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENT_CHUNKS (
    CHUNK_ID VARCHAR2(36) PRIMARY KEY,
    DOCUMENT_ID VARCHAR2(36) NOT NULL,
    VERSION_ID VARCHAR2(36) NOT NULL,
    CHUNK_NUMBER NUMBER NOT NULL,
    CONTENT_TYPE VARCHAR2(20) NOT NULL,
    CONTENT_TEXT CLOB,
    VECTOR_EMBEDDING BLOB,
    EMBEDDING_MODEL VARCHAR2(100),
    EMBEDDING_VERSION VARCHAR2(50),
    METADATA CLOB,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT FK_CHUNK_DOC FOREIGN KEY (DOCUMENT_ID) REFERENCES DOCUMENTS(DOCUMENT_ID),
    CONSTRAINT FK_CHUNK_VER FOREIGN KEY (VERSION_ID) REFERENCES DOCUMENT_VERSIONS(VERSION_ID),
    CONSTRAINT CHK_CONTENT_TYPE CHECK (CONTENT_TYPE IN ('TEXT', 'TABLE', 'HEADER', 'FOOTER'))
);

-- 创建审核工作流表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENT_REVIEWS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENT_REVIEWS (
    REVIEW_ID VARCHAR2(36) PRIMARY KEY,
    DOCUMENT_ID VARCHAR2(36) NOT NULL,
    VERSION_ID VARCHAR2(36) NOT NULL,
    REVIEW_STATUS VARCHAR2(20) NOT NULL,
    REVIEWER_ID VARCHAR2(50) NOT NULL,
    REVIEW_COMMENTS VARCHAR2(4000),
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    COMPLETED_AT TIMESTAMP,
    CONSTRAINT FK_REVIEW_DOC FOREIGN KEY (DOCUMENT_ID) REFERENCES DOCUMENTS(DOCUMENT_ID),
    CONSTRAINT FK_REVIEW_VER FOREIGN KEY (VERSION_ID) REFERENCES DOCUMENT_VERSIONS(VERSION_ID),
    CONSTRAINT CHK_REVIEW_STATUS CHECK (REVIEW_STATUS IN ('PENDING', 'APPROVED', 'REJECTED', 'CHANGES_REQUESTED'))
);

-- 创建文档关联表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE DOCUMENT_RELATIONS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE DOCUMENT_RELATIONS (
    RELATION_ID VARCHAR2(36) PRIMARY KEY,
    SOURCE_DOCUMENT_ID VARCHAR2(36) NOT NULL,
    TARGET_DOCUMENT_ID VARCHAR2(36) NOT NULL,
    RELATION_TYPE VARCHAR2(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CREATED_BY VARCHAR2(50) NOT NULL,
    CONSTRAINT FK_RELATION_SOURCE FOREIGN KEY (SOURCE_DOCUMENT_ID) REFERENCES DOCUMENTS(DOCUMENT_ID),
    CONSTRAINT FK_RELATION_TARGET FOREIGN KEY (TARGET_DOCUMENT_ID) REFERENCES DOCUMENTS(DOCUMENT_ID),
    CONSTRAINT CHK_RELATION_TYPE CHECK (RELATION_TYPE IN ('SUPERSEDES', 'REFERENCES', 'AMENDS', 'RELATED')),
    CONSTRAINT UK_DOC_RELATION UNIQUE (SOURCE_DOCUMENT_ID, TARGET_DOCUMENT_ID, RELATION_TYPE)
);

-- 创建审核评论表
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE REVIEW_COMMENTS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE REVIEW_COMMENTS (
    COMMENT_ID VARCHAR2(36) PRIMARY KEY,
    REVIEW_ID VARCHAR2(36) NOT NULL,
    CHUNK_ID VARCHAR2(36) NOT NULL,
    COMMENT_TEXT VARCHAR2(4000) NOT NULL,
    SUGGESTED_CHANGE VARCHAR2(4000),
    CREATED_BY VARCHAR2(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    RESOLVED CHAR(1) DEFAULT 'N' NOT NULL,
    RESOLVED_BY VARCHAR2(50),
    RESOLVED_AT TIMESTAMP,
    CONSTRAINT FK_COMMENT_REVIEW FOREIGN KEY (REVIEW_ID) 
        REFERENCES DOCUMENT_REVIEWS(REVIEW_ID),
    CONSTRAINT FK_COMMENT_CHUNK FOREIGN KEY (CHUNK_ID) 
        REFERENCES DOCUMENT_CHUNKS(CHUNK_ID),
    CONSTRAINT CHK_RESOLVED CHECK (RESOLVED IN ('Y', 'N'))
);

-- 创建索引（每个索引创建前检查并删除已存在的）
BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOCUMENTS_STATUS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOCUMENTS_STATUS ON DOCUMENTS(STATUS);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOCUMENTS_CATEGORY';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOCUMENTS_CATEGORY ON DOCUMENTS(CATEGORY);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOCUMENTS_PUBDATE';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOCUMENTS_PUBDATE ON DOCUMENTS(PUBLISHED_DATE);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOCUMENTS_BATCH';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOCUMENTS_BATCH ON DOCUMENTS(BATCH_ID);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOC_VERSIONS_DOC';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOC_VERSIONS_DOC ON DOCUMENT_VERSIONS(DOCUMENT_ID);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOC_VERSIONS_EFFECTIVE';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOC_VERSIONS_EFFECTIVE ON DOCUMENT_VERSIONS(EFFECTIVE_DATE);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOC_CHUNKS_DOC';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOC_CHUNKS_DOC ON DOCUMENT_CHUNKS(DOCUMENT_ID);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_DOC_CHUNKS_VER';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_DOC_CHUNKS_VER ON DOCUMENT_CHUNKS(VERSION_ID);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_REVIEW_COMMENTS_REVIEW';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_REVIEW_COMMENTS_REVIEW ON REVIEW_COMMENTS(REVIEW_ID);

BEGIN
   EXECUTE IMMEDIATE 'DROP INDEX IDX_REVIEW_COMMENTS_CHUNK';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE INDEX IDX_REVIEW_COMMENTS_CHUNK ON REVIEW_COMMENTS(CHUNK_ID);

-- 创建视图（每个视图创建前检查并删除已存在的）
BEGIN
   EXECUTE IMMEDIATE 'DROP VIEW V_LATEST_DOCUMENT_VERSIONS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE OR REPLACE VIEW V_LATEST_DOCUMENT_VERSIONS AS
SELECT d.*, v.VERSION_ID, v.VERSION_NUMBER, v.EFFECTIVE_DATE
FROM DOCUMENTS d
JOIN (
    SELECT DOCUMENT_ID, MAX(VERSION_NUMBER) AS MAX_VERSION
    FROM DOCUMENT_VERSIONS
    GROUP BY DOCUMENT_ID
) latest ON d.DOCUMENT_ID = latest.DOCUMENT_ID
JOIN DOCUMENT_VERSIONS v ON v.DOCUMENT_ID = latest.DOCUMENT_ID AND v.VERSION_NUMBER = latest.MAX_VERSION;

BEGIN
   EXECUTE IMMEDIATE 'DROP VIEW V_PENDING_REVIEWS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE OR REPLACE VIEW V_PENDING_REVIEWS AS
SELECT d.DOCUMENT_ID, d.DOCUMENT_NUMBER, d.TITLE, r.REVIEW_ID, r.REVIEWER_ID, 
       r.CREATED_AT AS REVIEW_STARTED, v.VERSION_NUMBER
FROM DOCUMENTS d
JOIN DOCUMENT_VERSIONS v ON d.DOCUMENT_ID = v.DOCUMENT_ID
JOIN DOCUMENT_REVIEWS r ON v.VERSION_ID = r.VERSION_ID
WHERE r.REVIEW_STATUS = 'PENDING' AND d.STATUS = 'UNDER_REVIEW';

BEGIN
   EXECUTE IMMEDIATE 'DROP VIEW V_DOCUMENT_EFFECTIVE_DATES';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
CREATE OR REPLACE VIEW V_DOCUMENT_EFFECTIVE_DATES AS
SELECT d.DOCUMENT_ID, d.DOCUMENT_NUMBER, d.TITLE, 
       ed.EFFECTIVE_DATE, ed.IMPLEMENTATION_DETAILS,
       v.VERSION_NUMBER, v.CHANGE_DESCRIPTION
FROM DOCUMENTS d
JOIN DOCUMENT_VERSIONS v ON d.DOCUMENT_ID = v.DOCUMENT_ID
JOIN DOCUMENT_EFFECTIVE_DATES ed ON v.VERSION_ID = ed.VERSION_ID;